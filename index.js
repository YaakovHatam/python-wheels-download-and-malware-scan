import { join } from 'path';
import { existsSync, mkdirSync, closeSync, openSync, readFileSync, writeFileSync } from 'fs';
import getWheelsModule from './core/get-wheels.mjs';
import { getReportsModule } from './core/get-reports.mjs';
import { EOL } from 'os';
import { analyzeResults } from './core/get-analyzed.mjs';

process.env.VirusTotalKey = "***";

const op = 5;

const BASE_DIR = "C:\\Users\\shaam\\Downloads\\temp\\";

const DIRS = Object.freeze({
    WHEELS_DIR: join(BASE_DIR, 'wheels'),
    SCAN_RESULTS_DIR: join(BASE_DIR, 'scan-results'),
    ERROR_SCAN_RESULTS_DIR: join(BASE_DIR, 'scan-results-error'),
    TEXT_RESULTS: join(BASE_DIR, 'results')
});

for (let dir in DIRS) {
    if (!existsSync(DIRS[dir])) mkdirSync(DIRS[dir], { recursive: true });
}

const FILES = Object.freeze({
    DONE_WHEELS_TEXT_FILE: join(DIRS.TEXT_RESULTS, 'done.txt'),
    WHEELS_REPORTS_TEXT_FILE: join(DIRS.TEXT_RESULTS, 'done-reports.txt'),
    WHEELS_TO_UPLOAD_TEXT_FILE: join(DIRS.TEXT_RESULTS, 'files-to-upload.txt')
});

const HTMLS = Object.freeze({
    HTML_TEMPLATE: join(BASE_DIR, 'template.html'),
    HTML_RESULTS: join(DIRS.TEXT_RESULTS, 'results.html'),
})

for (let file in FILES) {
    if (!existsSync(FILES[file])) closeSync(openSync(FILES[file], 'w'))
}

// make all files uniqe values
for (let file in FILES) {
    const fileLines = readFileSync(FILES[file]).toString().split(EOL).filter(Boolean);
    const len_before = fileLines.length;
    const unique = [...new Set(fileLines)];
    const len_after = unique.length;
    writeFileSync(FILES[file], unique.join(EOL) + EOL);
    console.log(FILES[file], 'len_before:', len_before, 'len_after', len_after);
}


const _getReportsModule = getReportsModule(DIRS, FILES);
const _getWheelsModule = getWheelsModule(FILES.DONE_WHEELS_TEXT_FILE, DIRS.WHEELS_DIR);

switch (op) {
    case 1: {
        _getWheelsModule.downloadDeps();
    }
        break;
    case 2: {
        _getReportsModule.getReports().then(res => console.log(res));
    }
        break;
    case 3: {
        _getReportsModule.uploadForReport().then(res => console.log(res));
    }
        break;
    case 4: {
        _getWheelsModule.executeDownloadCommand('pymssql')
    }
        break;
    case 5: {

        const wheelsTpUploadLen = readFileSync(FILES.WHEELS_TO_UPLOAD_TEXT_FILE).toString().split(EOL).filter(Boolean).length;
        if (wheelsTpUploadLen > 0) {
            console.log('Please scan all your wheels first!');
        } else {
            analyzeResults(DIRS, FILES, HTMLS);
        }

    }
        break;
}
