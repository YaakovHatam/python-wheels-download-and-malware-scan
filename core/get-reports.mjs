import * as fs from 'fs';
import { EOL } from 'os';
import { join } from 'path';
import { getFileReport, postFileReport } from './virus-total-ts/index.mjs';

function getReportsModule(DIRS, FILES) {

    const doneWheels = fs.readFileSync(FILES.DONE_WHEELS_TEXT_FILE).toString().split(EOL);
    const doneReports = fs.readFileSync(FILES.WHEELS_REPORTS_TEXT_FILE).toString().split(EOL);

    const promises = [];

    const uploadForReport = async () => {
        const wheelsToUpload = fs.readFileSync(FILES.WHEELS_TO_UPLOAD_TEXT_FILE).toString().split(EOL).filter(Boolean);
        wheelsToUpload.forEach(wtu => {
            const wheelToUploadFullPath = join(DIRS.WHEELS_DIR, wtu);
            promises.push(postFileReport(wheelToUploadFullPath).then(res => {
                console.log(res)
                wheelsToUpload.splice(wheelsToUpload.indexOf(wtu), 1);
            }));
        })

        return Promise.all(promises).then(res => {
            fs.writeFileSync(FILES.WHEELS_TO_UPLOAD_TEXT_FILE, wheelsToUpload.join(EOL) + EOL);


        });
    }

    const getReports = async () => doneWheels.forEach((wheel, idx) => {
        const promises = [];

        if (doneReports.indexOf(wheel) === -1) {
            const wheelFullPath = join(DIRS.WHEELS_DIR, wheel);

            promises.push(getFileReport(wheelFullPath).then(data => {

                if (data.error) {
                    const scanResultPath = join(DIRS.ERROR_SCAN_RESULTS_DIR, wheel + '.json');
                    fs.writeFileSync(scanResultPath, JSON.stringify(data));
                    fs.appendFileSync(FILES.WHEELS_TO_UPLOAD_TEXT_FILE, wheel + EOL);
                    console.log(data.error.code, wheel);
                } else {
                    const scanResultPath = join(DIRS.SCAN_RESULTS_DIR, wheel + '.json');
                    fs.writeFileSync(scanResultPath, JSON.stringify(data));
                    fs.appendFileSync(FILES.WHEELS_REPORTS_TEXT_FILE, wheel + EOL);
                    console.log(wheel);
                }
            }));
        }
        return Promise.all(promises);
    });

    return { getReports, uploadForReport }

}

export { getReportsModule }
